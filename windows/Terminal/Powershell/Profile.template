$Global:SourceLocation = "<<SOURCELOCATION>>"
$Global:GitHubSourceLocation = "<<GITHUBLOCATION>>"
$Global:AzureDevOpsSourceLocation = "<<AZURELOCATION>>"
$Global:BitBucketSourceLocation = "<<BITBUCKETLOCATION>>"
$Global:GitLabSourceLocation = "<<GITLABLOCATION>>"

# Set the output encoding
[console]::InputEncoding = [console]::OutputEncoding = New-Object System.Text.UTF8Encoding

# Load the profile
. "<<PROFILE>>"

# No Working directory specified?
$PSCoreWorkingDirSet = $PSVersionTable.PSEdition -ne 'Desktop' -and [Environment]::GetCommandLineArgs() -match '^-(WorkingDirectory|wd|wo|wor|work|worki|workin|working|workingd|workingdi|workingdir|workingdire|workingdirec|workingdirect|workingdirecto|workingdirector)';
$PSWorkingDirSet = [Environment]::CommandLine -match '\b(Set-Location|sl|cd|chdir|Push-Location|pushd|pul)\b';
$WorkingDirSpecified = $PSCoreWorkingDirSet -or $PSWorkingDirSet;
if(!$WorkingDirSpecified) {
    # Start with GitHub directory
    Enter-GitHubLocation
}

Clear-Host

# Load PSReadLine
$Global:PSReadLineInstalled = (Get-Module -ListAvailable -Name PSReadLine)
if ($Global:PSReadLineInstalled) {
    Write-Host "Initializing PSReadLine... " -NoNewline
    Import-Module PSReadLine
    Set-PSReadLineOption -PredictionSource History
    Set-PSReadLineOption -PredictionViewStyle ListView
    Set-PSReadLineOption -EditMode Windows
    Set-PSReadLineOption -Colors @{ InlinePrediction = "$([char]0x1b)[36;7;238m"}
    Write-Host "Done!" -ForegroundColor Green
}
else {
    Write-Host "The PSReadLine module has not been installed." -ForegroundColor Red
}

# Load Posh-git
$Global:PoshGitInstalled = (Get-Module -ListAvailable -Name posh-git)
if ($Global:PoshGitInstalled) {
    Write-Host "Initializing posh-git... " -NoNewline
    Import-Module posh-git
    $env:POSH_GIT_ENABLED = $true
    Write-Host "Done!" -ForegroundColor Green
}
else {
    Write-Host "The posh-git module has not been installed." -ForegroundColor Red
}

# Load Terminal-icons
$Global:TerminalIconsInstalled = (Get-Module -ListAvailable -Name Terminal-Icons)
if ($Global:TerminalIconsInstalled) {
    Write-Host "Initializing terminal-icons... " -NoNewline
    Import-Module -Name Terminal-Icons
    Write-Host "Done!" -ForegroundColor Green
}
else {
    Write-Host "The Terminal-Icons module has not been installed." -ForegroundColor Red
}

$Global:LOCALPROFILE = "<<LOCALPROFILE>>"
if (Test-Path $Global:LOCALPROFILE) {
    Write-Host "Initializing local profile... " -NoNewline
    . $Global:LOCALPROFILE
    Write-Host "Done!" -ForegroundColor Green
}

$Architecture = (Get-WmiObject Win32_OperatingSystem).OSArchitecture;
$IsArm = $false;
if($Architecture.StartsWith("ARM")) {
    $IsArm = $true;
}

if($env:PREFER_OLD_PROMPT) {
    . "<<PROMPT>>"
} else {
    # Initialize Oh-My-Posh
    Invoke-Expression (oh-my-posh --init --shell pwsh --config "<<MACHINE>>config\oh-my-posh.json")
}